= Vanubi Manual

== Vade language

Vade is a simple language for writing expressions in Vanubi.

=== Syntax

==== Friendly syntax explanation

In Vade everything is an expression, and each expression evaluates to a value.

An expression is a sequence of sub expressions separated by `;`.

[source,bison]
-------
expr1 ; expr2; ...; exprN
-------

Expressions can be `if` expressions, with an optional `else` branch:
	
[source,javascript]
-------
if (condition) true_expr else false_expr
-------

Usual assignment, arithmetic and relational expressions are supported. Assignment is done with `=` as follows:
	
[source,javascript]
-------
identifier = value
-------

If an expression is a function (like `concat`) it is possible to call such a function with arguments separated by `,` as follows:

[source,javascript]
-------
concat(arg1, ..., argN)
-------

You can define your own functions as follows:

[source,javascript]
-------
func = { param1 param2 | body }
func_without_params = { body }
-------

That is, enclosing an expression between braces will create an anonymous function.

==== Formal syntax

Below a BNF-like description of the language.

[source,bison]
----------
expr = seq
seq = nonseq [ ';' seq-expr ]
nonseq = binary | if

if = 'if' '(' binary ')' binary [ 'else' binary ]

binary = assign
assign = rel [ ('='|'+='|'-='|'*='|'/=') assign ]
rel = add [ ('=='|'!='|'>'|'>='|'<'|'<=') rel ]
add = mul [ ('+'|'-') add ]
mul = unary [ ('*'|'/') mul ]
unary = simple | ('-','++','--') simple

simple = simple-init [ simple-access ]*
simple-init = identifier [ ('++'|'--') ] | function | '(' nonseq ')' | literal
simple-access = '.' identifier | call
call = '(' [ arguments ] ')'
arguments = nonseq [ ',' nonseq ]*

function = '{' [ parameters '|' ] expr '}'
parameters = identifier [ ' ' identifier ]*

identifier = ALPHA [ ALPHANUM ]*
literal = num | string
num = DIGIT* [ '.' DIGIT* ]
string = "'" escaped-string "'"
----------

=== Semantics

Every expression in Vade evaluates to a value. The type of a value is either a function or a string. If the value is a string, it is interpreted as a number or a boolean depending on the operation performed on the value.

An expression is evaluated within a `scope`. A scope is a mapping between registers (or variables) and values. Registers are referenced by identifiers in the code.

An expression made up of a sequence of expressions (`expr1; ..., exprN`) will evaluate to the value of the last expression.

.Using registers and evaluating the last expression
=============

The expression below will evaluate to `10`:
	
[source,javascript]
----------
a = 4; b = 6; a+b
----------

=============

Referencing a non-existant register will evaluate to an empty string (or 0 if used as a number).

.Using undefined registers
=========

The expression below will evaluate to `1`:
	
[source,javascript]
----------
++foo
----------
=========

In the Vanubi editor, a `base scope` is created and all top-level expressions will share the same scope. Therefore a register assigned in an expression will then be reusable within the application when evaluating another expression at a later time.

Functions in Vade run in a scope which is created starting from the scope in which they are defined (`parent scope`).
Assigning a register `reg` inside a scope with a parent scope follows the rules below:
	
	1. If `reg` is defined in the scope, then the value within the scope is updated.
	2. Otherwise, if `reg` is defined in the parent (or any ancestor) scope, then `reg` is updated in that parent (or ancestor) scope.
	3. If `reg` is not defined in the parent (or ancestor) scope, then `reg` will be defined in the current scope (`local` to the function).
	
This allows for simple access to top-level registers, yet keeping the definition of new registers local to the function scope.
Parameters of function will define a local register in the function scope, hiding any register in the parent scope.

.Global and local registers
==========

The expression below will evaluate to `5` (not `7`) because `b` is zero in the parent scope:

[source,javascript]
------
a = 3; f = { b = 2; a = a+b }; f(); a+b
------

==========