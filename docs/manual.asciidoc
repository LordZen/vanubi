= Vanubi Manual

== Key/mouse bindings

Most of programming in Vanubi happens on the keyword. It's important to have meaningful key bindings. In this regard, Vanubi inherits some of Emacs key bindings.
Key bindings are made up of one or multiple key combinations: for example `C-x C-s` has to be interpreted as press `Ctrl+x` then press `Ctrl+s`, or keep `Ctrl+x` pressed then press `s`.
Pressing them at the same time is not needed, the important thing is to press keys in the correct order.

Currently supported modifiers are Shift (S-) and Ctrl (C-). Note that `C-x k`, `C-x C-k` and `C-k` and three different key bindings.

== Commands

Vanubi is controlled by commands issued by the user. A command might be activated by a key binding, a mouse action, or programmatically by invoking a command using `C-h` (the help command).
Not all commands have key bindings, however by using `C-h` it gets very handy to run unusual commands.

== Fuzzy search

All of the matching and search components of Vanubi use fuzzy search when possible. Fuzzy search means you can type only part of the text, and it will match and sort documents accordingly.
For example the query 'fb' will match 'foobar'. Sorting takes in consideration how and where the query pattern matches the document to obtain the best result.

== Dealing with files

At start you are prompted to edit `*scratch*`. This is not relative to any particular file, it exists as a temporary buffer for your own notetaking.

You can open a file for reading or create a new file with `open-file` (`C-x C-f`). You can type only part of the file and Vanubi will fuzzy search through file names.
It is also possible to fuzzy search through sub directories. For example '/u/b' will match all sub directories like `/usr/bin`, `/usr/sbin`, `/run/dbus`, `/usr/lib`, etc.
The tidle (`~`) is expand to the user home directory.

You can save a new or existing file being edited using `save-file` (`C-x C-s`). The file will be overwritten if it already exists.

If a file has been edited elsewhere and you want to reload it, it is possible with `reload-file`.

== Buffers or views or editors

A buffer (or editor) is a view of a file being edited. It is possible to split buffers horizontally or vertically (search for such commands with `C-h`).
This allows you to open two views for the same file.

You can switch between files within a view using `switch-buffer` (`C-x b`). Note that the first file in the switch buffer completion is the last file you edited in that view. That allows you to quickly switch between two files repeatedly within the same view, and to keep focus on the files you are recently editing.

To close a buffer you can issue `kill-buffer` with `C-x k`. If the closed buffer was the last visible buffer for a file, the file will be removed from Vanubi and won't be visible when switching buffers anymore.

== Shell terminals

Currently shell terminals can be opened with `compile-shell`. It will open a shell intended for compilation, though it's a general purpose shell.
Each file has its own shell, and the current working directory is saved for that file so that when you reopen Vanubi, the shell will initially open on your last working directory.

Vanubi will parse the output of compilation and try to guess possible errors. You can navigate through errors with `next-error` (`C-'`) and `prev-error` (`C-0`).

== Pipe-shell commands

Pipe-shell commands allow you to pipe the current contents (being saved or not) to a command, and do something with the output of the command.
Additionally, `%f`, `%s` and `%e` are replaced with the filename, selection start and selection end respectively in the shell command.

In particular, `pipe-shell-replace` allows you to create complex scripts to edit the current edited buffer as you wish.
While `pipe-shell-clipboard` allows you to call commands like `pastebinit` to share part or the whole buffer, or `asciidoc -b html5 - > tmp.html && xdg-open tmp.html` to render an asciidoc in your browser.

== Sessions

Vala keeps track of opened files and the current location of your cursor, and saves this information in the `default` session. After opening Vanubi, you can restore the last session with `restore-session`.
It is possible to save a named session with `save-session`, which you can later open with `restore-session` by specifying the name of the session.

== Marks

Vanubi keeps a stack of marks among files that are set by the user, and are never implicitly set.
You can set a mark on the current location with `mark` (`C-m`). You can go to the last mark set with `prev-mark` (`C-,`). Marks are added to a stack, so you can go back to previously set marks, and go forward with `next-mark` (`C-.`), until no more marks are available.

== Vade language

Vade is a simple language for writing expressions in Vanubi.

=== Syntax

==== Friendly syntax explanation

In Vade everything is an expression, and each expression evaluates to a value.

An expression is a sequence of sub expressions separated by `;`.

[source,bison]
-------
expr1 ; expr2; ...; exprN
-------

Expressions can be `if` expressions, with an optional `else` branch:
	
[source,javascript]
-------
if (condition) true_expr else false_expr
-------

Usual assignment, arithmetic and relational expressions are supported. Assignment is done with `=` as follows:
	
[source,javascript]
-------
identifier = value
-------

If an expression is a function (like `concat`) it is possible to call such a function with arguments separated by `,` as follows:

[source,javascript]
-------
concat(arg1, ..., argN)
-------

You can define your own functions as follows:

[source,javascript]
-------
func = { param1 param2 | body }
func_without_params = { body }
-------

That is, enclosing an expression between braces will create an anonymous function.

==== Formal syntax

Below a BNF-like description of the language.

[source,bison]
----------
expr = seq
seq = nonseq [ ';' seq-expr ]
nonseq = binary | if

if = 'if' '(' expr ')' primary [ 'else' primary ]

primary = assign
assign = rel [ ('='|'+='|'-='|'*='|'/=') assign ]
rel = add [ ('=='|'!='|'>'|'>='|'<'|'<=') rel ]
add = mul [ ('+'|'-') add ]
mul = unary [ ('*'|'/') mul ]
unary = simple | ('-','++','--') simple

simple = simple-init [ simple-access ]*
simple-init = identifier [ ('++'|'--') ] | function | '(' nonseq ')' | literal
simple-access = '.' identifier | call
call = '(' [ arguments ] ')'
arguments = nonseq [ ',' nonseq ]*

function = '{' [ parameters '|' ] expr '}'
parameters = identifier [ ' ' identifier ]*

identifier = ALPHA [ ALPHANUM ]*
literal = num | string
num = DIGIT* [ '.' DIGIT* ]
string = "'" escaped-string "'"
----------

=== Semantics

Every expression in Vade evaluates to a value. The type of a value is either a function or a string. If the value is a string, it is interpreted as a number or a boolean depending on the operation performed on the value.

An expression is evaluated within a `scope`. A scope is a mapping between registers (or variables) and values. Registers are referenced by identifiers in the code.

An expression made up of a sequence of expressions (`expr1; ..., exprN`) will evaluate to the value of the last expression.

.Using registers and evaluating the last expression
=============

The expression below will evaluate to `10`:
	
[source,javascript]
----------
a = 4; b = 6; a+b
----------

=============

Referencing a non-existant register will evaluate to an empty string (or 0 if used as a number).

.Using undefined registers
=========

The expression below will evaluate to `1`:
	
[source,javascript]
----------
++foo
----------
=========

In the Vanubi editor, a `base scope` is created and all top-level expressions will share the same scope. Therefore a register assigned in an expression will then be reusable within the application when evaluating another expression at a later time.

Functions in Vade run in a scope which is created starting from the scope in which they are defined (`parent scope`).
Assigning a register `reg` inside a scope with a parent scope follows the rules below:
	
	1. If `reg` is defined in the scope, then the value within the scope is updated.
	2. Otherwise, if `reg` is defined in the parent (or any ancestor) scope, then `reg` is updated in that parent (or ancestor) scope.
	3. If `reg` is not defined in the parent (or ancestor) scope, then `reg` will be defined in the current scope (`local` to the function).
	
This allows for simple access to top-level registers, yet keeping the definition of new registers local to the function scope.
Parameters of function will define a local register in the function scope, hiding any register in the parent scope.

.Global and local registers
==========

The expression below will evaluate to `5` (not `7`) because `b` is zero in the parent scope:

[source,javascript]
------
a = 3; f = { b = 2; a = a+b }; f(); a+b
------

==========