#!/usr/bin/env python

# The little vanubi

import sys, socket, os, os.path, struct, stat, getpass, threading, signal, subprocess

PORT = 62517
VERSION = "1"

################################
# list directory incrementally #
################################
import ctypes

DIR_p = ctypes.c_void_p
ino_t = ctypes.c_long
off_t = ctypes.c_long

class DIRENT(ctypes.Structure):
    _fields_ = [
        ('d_ino', ino_t),                 # inode number
        ('d_off', off_t),                 # offset to the next dirent
        ('d_reclen', ctypes.c_ushort),    # length of this record
        ('d_type', ctypes.c_ubyte),       # type of file; not supported
                                          #   by all file system types
        ('d_name', ctypes.c_char * 256),  # filename
	]
	
DIRENT_p = ctypes.POINTER(DIRENT)

C = ctypes.CDLL(None)

opendir = C.opendir
opendir.argtypes = [ctypes.c_char_p]
opendir.restype = DIR_p

readdir = C.readdir
readdir.argtypes = [DIR_p]
readdir.restype = DIRENT_p

closedir = C.closedir
closedir.argtypes = [DIR_p]
closedir.restype = ctypes.c_int

# Utils

def thread (func):
	class Th (threading.Thread):
		def run (self):
			func ()
	th = Th()
	th.start()
	return th

def connect (is_main):
	s = socket.socket (socket.AF_INET, socket.SOCK_STREAM)
	s.connect(("localhost", PORT))

	s.send ("%s\n" % VERSION)
	
	if is_main:
		s.send ("main\n")
	
	s.send ("ident\n")
	s.send (getpass.getuser()+"@"+socket.gethostname()+"\n")
	return s

# Main connection, for opening and monitoring files
	
def main_conn ():
	s = connect (True)
	# send open request
	path = os.path.abspath (sys.argv[1])
	s.sendall ("open\n%s\n" % path)
	s.close ()

# Connection pool for user requests

class Cancelled (RuntimeError):
	pass

def write_chunk (f, data):
	f.write (struct.pack("<i", len(data)))
	f.write (data);
	f.flush ()
	if f.readline().strip() != "continue":
		raise Cancelled()

def pool_conn ():
	s = connect (False)
	f = s.makefile ("r+b")
	s.close ()
	dirp = None
	while True:
		cmd = f.readline ()
		if not cmd:
			f.close ()
			return
		cmd = cmd.strip()
		if cmd == "read":
			process_read (f)
		elif cmd == "write":
			process_write (f)
		elif cmd == "exists":
			process_exists (f)
		elif cmd == "iterate children":
			dirp = process_iterate_children (f)
		elif cmd == "next children":
			dirp = process_next_children (f, dirp)
		elif cmd == "execute":
			process_execute (f)
		elif cmd == "cancel children":
			if dirp:
				closedir (dirp)
				dirp = None
		elif cmd == "is directory":
			process_is_directory (f)
		else:
			print "Unknown command", cmd
			return

# Automatically read and pass the path to the decorated function
def autopath (func):
	def _wrap (f, *args, **kw):
		path = f.readline ()
		if not path:
			f.close ()
			return
		path = os.path.abspath (path.strip())
		args = list(args)+[path]
		return func (f, *args, **kw)
	return _wrap

@autopath
def process_iterate_children (f, path):
	dirp = opendir(path)
	if not dirp:
		f.write ("error\n")
		f.write ("Cannot list directory: %s\n" % path)
		f.flush ()
		return
	else:
		f.write ("ok\n")
		f.flush ()

	return dirp

def process_next_children (f, dirp):
	if not dirp:
		f.write ("error\n")
		f.write ("No opened directory\n")
		f.flush ()
		return

	for x in range(50):
		dirent = readdir (dirp)
		if not dirent:
			f.write ("end\n")
			f.flush ()
			closedir (dirp)
			return
		else:
			if dirent[0].d_name in ("..", "."):
				continue
			f.write ("next\n")
			f.write ("%s\n" % dirent[0].d_name)
			f.write ("%s\n" % ((dirent[0].d_type == 4) and "true" or "false"))

	# wait for next load request from the endpoint
	f.write ("wait\n") 
	f.flush ()
	return dirp

@autopath
def process_execute (f, workdir):
	p = None
	try:
		cmd = f.readline ()
		if not cmd:
			f.close ()
			return

		try:
			p = subprocess.Popen (['/bin/bash', '-c', cmd], close_fds=True, cwd=workdir,
								  stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
		except Exception, e:
			write_chunk ("error\n%s\n" % e)
			return

		# stdin
		write_chunk ("ok\n")
		while True:
			size = int(f.readline ())
			if not size:
				break
			while size > 0:
				s = f.read (size)
				if not s:
					break
				size -= len (s)
				p.stdin.write (s)

			try:
				endout = enderr = False

				while not endout or not enderr:
					if not endout:
						s = p.stdout.read (4096)
						write_chunk (f, "stdout\n")
						if not s:
							write_chunk (f, "0\n")
							endout = True
						else:
							write_chunk (f, "%d\n%s" % len(s))

					if not enderr:
						s = p.stderr.read (4096)
						f.write ("stderr\n")
						if not s:
							write_chunk (f, "0\n")
							enderr = True
						else:
							write_chunk (f, "%d\n%s" % len(s))
			except Exception, e:
				write_chunk (f, "error\n%s\n" % e)
				return

		status = p.wait ()
		write_chunk (f, "%d\n" % status)
	except Cancelled:
		if p:
			try:
				p.kill ()
			except:
				pass
			p = None
		return

@autopath
def process_exists (f, path):
	if os.path.exists (path):
		write_chunk (f, "true\n")
	else:
		write_chunk (f, "false\n")

@autopath
def process_is_directory (f, path):
	if os.path.isdir (path):
		write_chunk (f, "true\n")
	else:
		write_chunk (f, "false\n")

@autopath
def process_read (f, path):
	try:
		size = os.path.getsize (path)
	except Exception, e:
		write_chunk (f, "error\nCannot read file: %s\n" % e)
		return

	try:
		file = open (path, "rb")
	except Exception, e:
		write_chunk (f, "error\nCannot open file for reading: %s\n" %e)
		return

	f.write ("%d\n" % size)
	while size > 0:
		s = file.read (size)
		if not s:
			break
		size -= len(s)
		if not write_chunk (f, s):
			break
	file.close ()
	
@autopath
def process_write (f, path):
	try:
		# first try appending to see if we can write to the file
		tmp = open (path, "ab")
		tmp.close ()
	except Exception, e:
		write_chunk (f, "error\nCannot open file for writing: %s\n" % e)
		return

	try:
		file = open (path+".tmp", "wb")
	except Exception, e:
		write_chunk (f, "error\nCannot open temp file for writing: %s\n" % e)
	
	write_chunk (f, "ok\n")
	while True:
		size = int(f.readline ())
		if not size:
			break
		while size > 0:
			s = f.read (size)
			if not s:
				break
			size -= len (s)
			file.write (s)
	file.close()
	os.rename (path+".tmp", path)

def main ():
	if len (sys.argv) < 2:
		print "Usage: %s FILE [FILE...]" % sys.argv[0]
		sys.exit(1)
		
	ths = [thread (main_conn)]
	for x in range(3):
		ths.append (thread (pool_conn))

if __name__ == "__main__":
	main ()
